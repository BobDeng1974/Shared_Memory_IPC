/*************************************************************************
	> File Name: shmwrite.c
	> Author: Crazycuo
	> Mail: 740094202@qq.com 
	> Created Time: 2016年03月02日 星期三 19时57分12秒
 ************************************************************************/

#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>
#include <string.h>
#include <pthread.h>
#include "../shm_buffer.h"

int main(int argc, char **argv)
{
	int shm_id,i;
	key_t key;
	char temp[8];
	char pathname[30];
	char* shmaddr;

	//系统建立IPC通讯必须指定一个ID值，通常情况下，该ID值通过ftok函数得到
	strcpy(pathname,"/home/crazycuo");
	key=ftok(pathname,0x03);
	if(key==-1) {
		perror("ftok error");
		return -1;
	}
	printf("key=%d\n",key);

	shm_id=shmget(key,0,0);
	if(shm_id == -1) {
		perror("shmget error\n");
		return -1;
	}
	printf("shm_id = %d\n",shm_id);

	shmaddr=(char*)shmat(shm_id,NULL,0);
	if((int)shmaddr ==-1) {
		perror("shmat addr error!\n");
		return -1;
	}

	/*
	 * here is the daemon
	 */

	shm_buffer_head *head;
	head=(shm_buffer_head*)shmaddr;
	int count = 0;
	char buffer[PER_BUFFER_SIZE];
	int fd;

	fd = open(argv[2],O_RDWR|O_CREAT);
	if(fd == -1)
	{
		printf("open file error!\n");
		return -1;
	}

	int shm_fd =atoi(argv[1]);
	double cost;
	double aver;
	double sum=0;
	double min=10000;
	double max=0;
	while(1){
		while(!IsQueueEmpty(&head->readqueue[shm_fd])) {
			int p;

			OutQueue(&head->readqueue[shm_fd],&p);
			shm_buffer *temp;
			temp = (shm_buffer*)(shmaddr+p);

			//strncpy(buffer,shmaddr+temp->addr,temp->size);

			char sec[11];
			char usec[7];

			memcpy(sec,shmaddr+temp->addr,10);
			memcpy(usec,shmaddr+temp->addr+11,6);


			struct timeval time;
			gettimeofday(&time,NULL);
			
			printf("context:%s %s\n",sec,usec);
			printf("now time:%ld %ld\n",time.tv_sec,time.tv_usec);
			cost=(time.tv_usec-atoi(usec))*1.0/1000+1000*(time.tv_sec-atoi(sec));
			printf("cost: %fms\n\n",cost);

			if(cost>max) max=cost;
			if(cost<min) min=cost;
			sum+=cost;
			count++;
			aver=sum/count;

			printf("max: %f\t min: %f\taver:%fms\n",max,min,aver);
			
			/*
			char result[10];
			sprintf(result,"%f",aver);
			write(fd,result,strlen(result));
			write(fd,"\n",1);
			*/

			__sync_fetch_and_add(&(temp->num_of_finished_readers),1);	
			printf("num_of_finished_readers: %d\n",temp->num_of_finished_readers);
			//if(shm_fd == 0) {
			if(temp->num_of_finished_readers == temp->num_of_readers) {
				printf("add in\n");
				memset(shmaddr+temp->addr,0,PER_BUFFER_SIZE);
				temp->size = 0;
				InQueue(&head->writequeue,p);
			}
		}
		usleep(50);
	}
	if(shmdt(shmaddr)==-1) {
		perror("detach error!\n");
		return -1;
	}
	shmctl(shm_id,IPC_RMID,NULL);
	return 0;
}

